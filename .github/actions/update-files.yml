name: Update Files
description: Update files and increment version
inputs:
  current_version:
    description: Current version
    required: true   

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Git user
      shell: bash
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.com"

    - name: Increment version
      id: version
      shell: bash
      run: |
        IFS='.' read -r MAJOR MINOR PATCH <<< "${{ inputs.current_version }}"
        PATCH=$(($PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$PATCH"
        sed -i "0,/${{ inputs.current_version }}/s//${NEW_VERSION}/" ${{ env.VERSION_FILE }} ${{ env.SETUP_FILE }}
        sed -i "0,/${{ inputs.current_version }}/s//${NEW_VERSION}/" ${{ env.PYPROJECT_FILE }}
        git add ${{ env.VERSION_FILE }} ${{ env.SETUP_FILE }} ${{ env.PYPROJECT_FILE }}
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: "Set up Python"
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Restore license data from cache
      id: license-cache
      uses: actions/cache@v4
      with:
        path: ./.scripts/license-data.json
        key: license-data

    - name: Download license data
      if: steps.license-cache.outputs.cache-hit != 'true'
      shell: bash
      run: uv run .scripts/download_license_data.py ${{ env.SPDX_DATA_URL }}

    - name: Cache license data
      if: steps.license-cache.outputs.cache-hit != 'true'
      uses: actions/cache@v4
      with:
        path: ./.scripts/license-data.json
        key: license-data

    - name: Add license data to env
      shell: bash
      run: echo "LICENSE_DATA=$(pwd)/.scripts/license-data.json" >> $GITHUB_ENV

    - name: Update packaging
      shell: bash
      run: |
        uv run .scripts/update_packaging.py "${{ env.SETUP_FILE }}" "${{ env.AUTHORS_FILE }}" "${{ env.PYPROJECT_FILE }}" "${{ env.LICENSE_DATA }}"
        uvx ruff format
        git add "${{ env.SETUP_FILE }}" "${{ env.PYPROJECT_FILE }}"

    - name: Remove license data
      shell: bash
      run: |
        if [ -f "${{ env.LICENSE_DATA }}" ]; then
          rm "${{ env.LICENSE_DATA }}"
        fi

    - name: Update README
      shell: bash
      run: |
        uv run .scripts/update_readme.py "${{ env.README_FILE }}"
        git add "${{ env.README_FILE }}"

    - name: Push changes
      shell: bash
      run: |
        if git status --porcelain "${{ env.VERSION_FILE }}" "${{ env.SETUP_FILE }}" "${{ env.PYPROJECT_FILE }}" | grep -q .; then
          git commit  -m "Auto-increment version to ${{ steps.version.outputs.new_version }}"
          git push origin master
        else
          echo "No changes to push"
        fi

    - name: Build and publish
      shell: bash
      run: |
        uv build
        uv publish
