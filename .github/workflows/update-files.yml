name: Update Files

on:
  workflow_call:
    inputs:
      updated_version:
        required: true
        type: boolean


permissions:
  contents: write
  id-token: write

env:
  VERSION_FILE: VERSION.txt
  SETUP_FILE: setup.py
  AUTHORS_FILE: AUTHORS.txt
  PYPROJECT_FILE: pyproject.toml
  README_FILE: README.md

jobs:
  update-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Read current version
        id: fork_state
        run: |
          CURRENT_VERSION=$(grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' "${{ env.VERSION_FILE }}")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Increment version
        id: version
        run: |
          IFS='.' read -r MAJOR MINOR PATCH <<< "${{ steps.fork_state.outputs.current_version }}"
          PATCH=$(($PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          sed -i "0,/${{ steps.fork_state.outputs.current_version }}/s//${NEW_VERSION}/" ${{ env.VERSION_FILE }} ${{ env.SETUP_FILE }}
          sed -i "0,/${{ steps.fork_state.outputs.current_version }}/s//${NEW_VERSION}/" ${{ env.PYPROJECT_FILE }}
          git add ${{ env.VERSION_FILE }} ${{ env.SETUP_FILE }} ${{ env.PYPROJECT_FILE }}
          if git status --porcelain | grep -q -E "${{ env.VERSION_FILE }}|${{ env.SETUP_FILE }}|${{ env.PYPROJECT_FILE }}"; then
            git commit -m "Auto-increment version to $NEW_VERSION"
          fi

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Restore license data from cache
        id: license-cache
        uses: actions/cache@v4
        with:
          path: ./.scripts/license-data.json
          key: license-data

      - name: Download license data
        if: steps.license-cache.outputs.cache-hit != 'true'
        run: uv run .scripts/download_license_data.py

      - name: Cache license data
        if: steps.license-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ./.scripts/license-data.json
          key: license-data

      - name: Add license data to env
        run: echo "LICENSE_DATA=$(pwd)/.scripts/license-data.json" >> $GITHUB_ENV

      - name: Update packaging
        run: |
          uv run .scripts/update_packaging.py "${{ env.SETUP_FILE }}" "${{ env.AUTHORS_FILE }}" "${{ env.PYPROJECT_FILE }}" "${{ env.LICENSE_DATA }}"
          uvx ruff format
          git add "${{ env.SETUP_FILE }}" "${{ env.PYPROJECT_FILE }}"
          if git status --porcelain | grep -q -E "${{ env.SETUP_FILE }}|${{ env.PYPROJECT_FILE }}"; then
            git commit -m "Update supported Python versions"
          fi
      - name: Remove license data
        run: rm ${{ env.LICENSE_DATA }}

      - name: Update README
        run: |
          uv run .scripts/update_readme.py "${{ env.README_FILE }}"
          git add "${{ env.README_FILE }}"
          if git status --porcelain | grep -q "README.md"; then
            git commit -m "Update README"
          fi

      - name: Push changes
        run: |
          if git log origin/master..HEAD | grep -q .; then
            git push origin master
          else
            echo "No changes to push"
          fi


      - name: Build and publish
        run: |
          uv build
          uv publish
