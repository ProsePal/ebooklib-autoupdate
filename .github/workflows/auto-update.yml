name: Auto-Update

on:
  schedule:
    - cron: '0 0 * * 0'  # Every Sunday at midnight UTC

permissions:
  contents: write
  id-token: write

env:
  VERSION_FILE: VERSION.txt
  SETUP_FILE: setup.py
  AUTHORS_FILE: AUTHORS.txt
  PYPROJECT_FILE: pyproject.toml
  README_FILE: README.md
  SPDX_DATA_URL: https://raw.githubusercontent.com/spdx/license-list-data/refs/heads/main/json/licenses.json


jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Add upstream repo
        run: |
          git remote add upstream https://github.com/aerkalov/ebooklib || echo "Upstream already added"
          git fetch upstream

      - name: Read current version
        id: fork_state
        run: |
          CURRENT_VERSION=$(grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' "${{ env.VERSION_FILE }}")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Check if upstream has changes
        id: upstream_changes
        run: |
          VERSION_TIMESTAMP=$(git log -1 --format=%at -- ${{ env.VERSION_FILE }})
          if [[ $(git log upstream/master -1 --format=%at) -gt $VERSION_TIMESTAMP ]]; then
            echo "updated_version=true" >> $GITHUB_OUTPUT
          else
            echo "updated_version=false" >> $GITHUB_OUTPUT
          fi

      - name: Add GitHub Action Bot
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Merge upstream changes
        if: steps.upstream_changes.outputs.updated_version == 'true'
        run: |
          {
            echo "${{ env.VERSION_FILE }} merge=theirs"
          } > .gitattributes
          git merge upstream/master --allow-unrelated-histories

      - name: Update files
        if: steps.upstream_changes.outputs.updated_version == 'true'
        uses: ./.github/actions/update-files
        with:
          current_version: ${{ steps.fork_state.outputs.current_version }}
          
      - name: Rebase commit history
        if: steps.upstream_changes.outputs.updated_version == 'true'
        run: |
          git fetch origin
          MERGE_COMMIT=$(git log -2 --pretty=%H origin/master | tail -n 1)
          UPDATE_FILES_COMMIT=$(git rev-parse HEAD)
          git checkout "$MERGE_COMMIT"
          git cherry-pick "$UPDATE_FILES_COMMIT"
          git commit --amend --no-edit
          git push origin master --force 

      - name: Sync new branches
        run: |
          git fetch --all
          for BRANCH in $(git branch -r | grep "upstream/" | grep -v "HEAD" | sed 's/upstream\///'); do
            if [ "$BRANCH" == "master" ]; then
              continue
            fi
            if ! git show-ref --verify --quiet "refs/heads/$BRANCH"; then
              git branch "$BRANCH" "upstream/$BRANCH"
            else
              git checkout "$BRANCH"
              git merge -s recursive -X theirs "upstream/$BRANCH" --no-edit
            fi
            git push -f origin "$BRANCH"
          done