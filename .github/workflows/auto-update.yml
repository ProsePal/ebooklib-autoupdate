name: Auto-Update

on:
  schedule:
    - cron: '0 0 * * 0'  # Every Sunday at midnight UTC
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

env:
  VERSION_FILE: VERSION.txt
  SETUP_FILE: setup.py
  PYPROJECT_FILE: pyproject.toml

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Add upstream repo
        run: |
          git remote add upstream https://github.com/aerkalov/ebooklib || echo "Upstream already added"
          git fetch upstream

      - name: Read fork version and setup hash
        id: fork_state
        run: |
          CURRENT_VERSION=$(grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' "${{ env.VERSION_FILE }}")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Add GitHub Action Bot
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check if upstream has changes
        id: upstream_changes
        run: |
          VERSION_TIMESTAMP=$(git log -1 --format=%at -- ${{ env.VERSION_FILE }})
          UPSTREAM_SETUP_TIMESTAMP=$(git log upstream/master -1 --format=%at -- ${{ env.SETUP_FILE }})
          if [[ $(git log upstream/master -1 --format=%at) -gt $VERSION_TIMESTAMP ]]; then
            echo "updated_version=true" >> $GITHUB_OUTPUT
          else
            echo "updated_version=false" >> $GITHUB_OUTPUT
          fi
          if [[ $UPSTREAM_SETUP_TIMESTAMP -gt $VERSION_TIMESTAMP ]]; then
            echo "update_setup=true" >> $GITHUB_OUTPUT
          else
            echo "update_setup=false" >> $GITHUB_OUTPUT
          fi

      - name: Merge upstream changes
        if: steps.upstream_changes.outputs.updated_version == 'true'
        run: |
          {
            echo "${{ env.VERSION_FILE }} merge=theirs"
            if [[ "${{ steps.upstream_changes.outputs.update_setup }}" == "true" ]]; then
              echo "${{ env.SETUP_FILE }} merge=theirs"
            else
              echo "${{ env.SETUP_FILE }} merge=ours"
            fi
          } > .gitattributes
          git merge upstream/master --no-edit

      - name: Increment version
        id: version
        if: steps.upstream_changes.outputs.updated_version == 'true'
        run: |
          UPSTREAM_VERSION=$(grep -Eo '[0-9]+\.[0-9]+' "${{ env.VERSION_FILE }}")
          IFS='.' read -r UPSTREAM_MAJOR UPSTREAM_MINOR <<< "$UPSTREAM_VERSION"
          CURRENT_VERSION="${{ steps.fork_state.outputs.current_version }}"
          IFS='.' read -r CURRENT_MAJOR CURRENT_MINOR PATCH <<< "$CURRENT_VERSION"
          if [[ $UPSTREAM_MAJOR == $CURRENT_MAJOR && $UPSTREAM_MINOR == $CURRENT_MINOR ]]; then
            PATCH=$(($PATCH + 1))
            NEW_VERSION="$CURRENT_MAJOR.$CURRENT_MINOR.$PATCH"
          else
            NEW_VERSION="$UPSTREAM_MAJOR.$UPSTREAM_MINOR.0"
          fi
          sed -i "0,/$UPSTREAM_VERSION/s//$NEW_VERSION/" ${{ env.VERSION_FILE }} ${{ env.SETUP_FILE }}
          sed -i "0,/$CURRENT_VERSION/s//$NEW_VERSION" ${{ env.PYPROJECT_FILE }}
          git add ${{ env.VERSION_FILE }} ${{ env.SETUP_FILE }} ${{ env.PYPROJECT_FILE }}
          git commit -m "Auto-increment version to $NEW_VERSION"

      - name: Update supported Python versions in setup.py
        if: steps.upstream_changes.outputs.update_setup == 'true'
        run: |
          python <<EOF
          import re
          supported_versions = ["3.6", "3.7", "3.8", "3.9", "3.10", "3.11", "3.12"]
          setup_file = "${{ env.SETUP_FILE }}"
          with open(setup_file, "r") as f:
            original_text = f.read()
          text = re.sub("and kindle ", "", original_text)
          allowed_keywords = r"Keywords = ['ebook', 'epub']"
          keyword_pattern = r"Keywords = [(?:'\w+',\s?)*'\w+']"
          corrected_text = re.sub(keyword_pattern, allowed_keywords, text)
          programming_line_stub = '"Programming Language :: Python :: '
          programming_line = f'{programming_line_stub}[0-9.]+,"'
          existing_versions = sorted(version[4:].strip() for version in re.findall(programming_line, corrected_text))
          old_versions = rf'^\s*{programming_line}*(?:\n\s*{programming_line})*'
          new_versions = "\n".join(
            f'         {programming_line_stub}{version},"'
            for version in supported_versions
          )
          new_version_text = re.sub(old_versions, new_versions, corrected_text, flags=re.MULTILINE)
          with open(setup_file, "w") as f:
            f.write(new_version_text)
          EOF
          git add ${{ env.SETUP_FILE }}
          git commit -m "Update supported Python versions"

      - name: Push changes to fork
        if: steps.upstream_changes.outputs.updated_version == 'true'
        run: git push origin master

      - name: Install uv
        if: steps.upstream_changes.outputs.updated_version == 'true'
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Build and publish
        if: steps.upstream_changes.outputs.updated_version == 'true'
        run: |
          uv build
          uv publish

      - name: Sync new branches
        run: |
          git fetch --all
          for BRANCH in $(git branch -r | grep "upstream/" | grep -v "HEAD" | sed 's/upstream\///'); do
            if [ "$BRANCH" == "master" ]; then
              continue
            fi
            if ! git show-ref --verify --quiet "refs/heads/$BRANCH"; then
              git branch "$BRANCH" "upstream/$BRANCH"
            else
              git checkout "$BRANCH"
              git merge -s recursive -X theirs "upstream/$BRANCH" --no-edit
            fi
            git push -f origin "$BRANCH"
          done